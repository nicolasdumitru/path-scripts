#!/bin/sh

# Error messages
choice_error_title='Invalid Choice'
choice_error_message='is an invalid choice. Halting.'

# Cancel messages
choice_cancel_title='Operation Cancelled'
choice_cancel_message='No screenshot will be taken. Halting.'

# Flags (must be set)
screenshot_flags=''

# Exit handler (exit status, stdout, stderr, notifications)
exit_handler () {
	exit_code=$1
	exit_notification_title="$2"
	message="$3"
	notify_opts=' '
	if [ "${exit_code}" -gt 0 ]; then
		notify_opts='--urgency=critical'
		echo "${message}" 1>&2
	else
		echo "${message}"
	fi
	shift 3
	notify-send $notify_opts "${exit_notification_title}" "${*:-$message}"
	exit "$exit_code"
}

# Exception handler (cancel/choice error behavior)
cancel_or_error () {
	if [ -n "$1" ]; then
		coe_exit_code=1
		coe_notification_title="$choice_error_title"
		coe_message="'$1' $choice_error_message"
	else
		coe_exit_code=0
		coe_notification_title="$choice_cancel_title"
		coe_message="$choice_cancel_message"
	fi
	exit_handler "$coe_exit_code" "$coe_notification_title" "$coe_message"
}

# Screenshot types
dmenu_type_full="full (all screens)"
dmenu_type_screen="screen (the current active screeen)"
dmenu_type_window="window (the current active window)"
dmenu_type_select="select interactively (draw a rectangle with the mouse)"

# Concatenate options
dmenu_options="${dmenu_type_full}\n${dmenu_type_screen}\n${dmenu_type_window}\n${dmenu_type_select}"

# Pick a screenshot type with dmenu
dmenu_type_pick="$(printf "%s${dmenu_options}" | dmenu -l 6 -i -p "Screenshot which area?")"
case "$dmenu_type_pick" in
	"$dmenu_type_full") screenshot_type='full' ;;
	"$dmenu_type_screen") screenshot_type='screen' ;;
	"$dmenu_type_window") screenshot_type='window' ;;
	"$dmenu_type_select")
		screenshot_type='select'
		screenshot_flags='-bd'
		;;
	*) cancel_or_error "$dmenu_type_pick" ;;
esac

# Choose whether to capture background when relevant
case "$screenshot_type" in
	window)
		capture_background="$(printf "yes\nno" | dmenu -i -p "Capture window background?")"
		case "$capture_background" in
			yes) screenshot_flags="${screenshot_flags} -b" ;;
			no) ;;
			*) cancel_or_error "$capture_background" ;;
		esac
		;;
esac

# Choose to show or hide the cursor
case "$screenshot_type" in
	full|screen|window)
		show_cursor="$(printf "show\nhide" | dmenu -i -p "Show the cursor or hide it?")"
		case "$show_cursor" in
			show) ;;
			hide) screenshot_flags="${screenshot_flags} -c" ;;
			*) cancel_or_error "$show_cursor" ;;
		esac
		;;
esac

screenshot ${screenshot_flags} -n "$screenshot_type"
